{
	"name": "df_transform_cases_deaths",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_cases_deaths",
						"type": "DatasetReference"
					},
					"name": "CasesDeathsSource"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "CountryLookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Processed_cases_deaths",
						"type": "DatasetReference"
					},
					"name": "CasesDeathsSink"
				}
			],
			"transformations": [
				{
					"name": "filterEuropeOnly"
				},
				{
					"name": "selectOnlyReqFields"
				},
				{
					"name": "pivotCounts"
				},
				{
					"name": "lookCountry"
				},
				{
					"name": "selectforSink"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as integer,",
				"          indicator as string,",
				"          daily_count as integer,",
				"          date as date,",
				"          rate_14_day as double,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CasesDeathsSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountryLookup",
				"CasesDeathsSource filter(continent == 'Europe' && not(isNull(country_code))) ~> filterEuropeOnly",
				"filterEuropeOnly select(mapColumn(",
				"          country,",
				"          country_code,",
				"          population,",
				"          indicator,",
				"          daily_count,",
				"          reported_date = date,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> selectOnlyReqFields",
				"selectOnlyReqFields pivot(groupBy(country,",
				"          country_code,",
				"          population,",
				"          source,",
				"          reported_date),",
				"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
				"     count = sum(daily_count),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotCounts",
				"pivotCounts, CountryLookup lookup(pivotCounts@country == CountryLookup@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookCountry",
				"lookCountry select(mapColumn(",
				"          country = pivotCounts@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population = pivotCounts@population,",
				"          {confirmed cases_count},",
				"          deaths_count,",
				"          reported_date,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectforSink",
				"selectforSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Cases_deaths_file'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> CasesDeathsSink"
			]
		}
	}
}