{
	"name": "df_Hospital_admissions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_hospital_admissions",
						"type": "DatasetReference"
					},
					"name": "HospitalAdmissionsData"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup1",
						"type": "DatasetReference"
					},
					"name": "countrySource"
				},
				{
					"dataset": {
						"referenceName": "ds_DimDate_lookup",
						"type": "DatasetReference"
					},
					"name": "lookupForDimdate"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_admissions_weekly_sink",
						"type": "DatasetReference"
					},
					"name": "sinkWeeklyData",
					"rejectedDataLinkedService": {
						"referenceName": "ls_csv_to_dl",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "ds_processed_admissions_daily_sink",
						"type": "DatasetReference"
					},
					"name": "sinkDailyHospitalAdmisData"
				}
			],
			"transformations": [
				{
					"name": "RemoveUnwantedColumns"
				},
				{
					"name": "lookupOutput"
				},
				{
					"name": "RemoveReapeatedColumns"
				},
				{
					"name": "WeeklyToDailySplit"
				},
				{
					"name": "deriveYearWeekColumn"
				},
				{
					"name": "aggWeekly"
				},
				{
					"name": "joinWithDimDate"
				},
				{
					"name": "pivotWeekly"
				},
				{
					"name": "pivotDaily"
				},
				{
					"name": "sortWeekly"
				},
				{
					"name": "sortDaily"
				},
				{
					"name": "selectColumnsForWeekly"
				},
				{
					"name": "selectColumnForDaily"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> HospitalAdmissionsData",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> countrySource",
				"source(output(",
				"          date_key as string,",
				"          date as date,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> lookupForDimdate",
				"HospitalAdmissionsData select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveUnwantedColumns",
				"RemoveUnwantedColumns, countrySource lookup(RemoveUnwantedColumns@country == countrySource@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupOutput",
				"lookupOutput select(mapColumn(",
				"          country = RemoveUnwantedColumns@country,",
				"          country_code_3_digit,",
				"          country_code_2_digit,",
				"          indicator,",
				"          value,",
				"          reported_date,",
				"          reported_year_week,",
				"          population,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveReapeatedColumns",
				"RemoveReapeatedColumns split(indicator=='Weekly new hospital admissions per 100k' || indicator=='Weekly new ICU admissions per 100k',",
				"     disjoint: false) ~> WeeklyToDailySplit@(Weekly, Daily)",
				"lookupForDimdate derive(ecdc_year_week = year + '-W' + lpad(week_of_year, 2, '0')) ~> deriveYearWeekColumn",
				"deriveYearWeekColumn aggregate(groupBy(ecdc_year_week),",
				"     start_of_week = min(date),",
				"          send_of_week = max(date)) ~> aggWeekly",
				"WeeklyToDailySplit@Weekly, aggWeekly join(reported_year_week == ecdc_year_week,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinWithDimDate",
				"joinWithDimDate pivot(groupBy(country,",
				"          country_code_3_digit,",
				"          country_code_2_digit,",
				"          population,",
				"          source,",
				"          reported_year_week,",
				"          start_of_week,",
				"          send_of_week),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new  ICU admissions per 100k']),",
				"     ount = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotWeekly",
				"WeeklyToDailySplit@Daily pivot(groupBy(country,",
				"          country_code_3_digit,",
				"          country_code_2_digit,",
				"          population,",
				"          reported_date,",
				"          source),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotDaily",
				"pivotWeekly sort(asc(country, true),",
				"     desc(reported_year_week, true)) ~> sortWeekly",
				"pivotDaily sort(asc(country, true),",
				"     desc(reported_date, true),",
				"     partitionBy('hash', 1)) ~> sortDaily",
				"sortWeekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          start_of_week,",
				"          end_of_week = send_of_week,",
				"          {new hospital admissions per 100k_ount} = {Weekly new hospital admissions per 100k_ount},",
				"          {new  ICU admissions per 100k_ount} = {Weekly new  ICU admissions per 100k_ount},",
				"          source",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumnsForWeekly",
				"sortDaily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          {hospital occupancy_count} = {Daily hospital occupancy_count},",
				"          {ICU occupancy_count} = {Daily ICU occupancy_count},",
				"          source",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumnForDaily",
				"selectColumnsForWeekly sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkWeeklyData",
				"selectColumnForDaily sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkDailyHospitalAdmisData"
			]
		}
	}
}